name: "CI/CD: Build and Deploy All Services on EC2"

on:
  push:
    branches:
      - main

env:
  IMAGE_TAG: latest

jobs:
  build-and-push:
    name: "🔧 Build and Push to ECR"
    runs-on: ubuntu-latest

    steps:
      - name: "📮 Checkout Code"
        uses: actions/checkout@v3

      - name: "🔐 Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: "🐳 Login to Amazon ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: "🐳 Build and Push Custom Docker Images"
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}

          docker build -f Dockerfile -t $ECR_REGISTRY/app:$IMAGE_TAG .
          docker build -f airflow/Dockerfile -t $ECR_REGISTRY/airflow:$IMAGE_TAG airflow/

          docker push $ECR_REGISTRY/app:$IMAGE_TAG
          docker push $ECR_REGISTRY/airflow:$IMAGE_TAG

  deploy-on-ec2:
    name: "🚀 Deploy on EC2"
    needs: build-and-push
    runs-on: self-hosted

    steps:
      - name: 🧹 Force clean workspace
        run: |
          echo "Cleaning workspace at $GITHUB_WORKSPACE"
          sudo find $GITHUB_WORKSPACE -name "__pycache__" -type d -exec rm -rf {} +

      - name: "📮 Checkout Code"
        uses: actions/checkout@v3

      - name: "🔐 Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: "🔁 Login to Amazon ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: "📦 Pull ECR Images"
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}

          docker pull $ECR_REGISTRY/app:$IMAGE_TAG
          docker pull $ECR_REGISTRY/airflow:$IMAGE_TAG

      - name: 🌱 Set environment variables for Docker Compose
        run: |
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          echo "AIRFLOW_UID=${{ secrets.AIRFLOW_UID }}" >> $GITHUB_ENV
          echo "GIT_EMAIL=${{ secrets.GIT_EMAIL }}" >> $GITHUB_ENV
          echo "GIT_NAME=${{ secrets.GIT_NAME }}" >> $GITHUB_ENV
          echo "DVC_REMOTE_NAME=${{ secrets.DVC_REMOTE_NAME }}" >> $GITHUB_ENV
          echo "DVC_S3_BUCKET=${{ secrets.DVC_S3_BUCKET }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION_NAME=${{ secrets.AWS_REGION_NAME }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
      - name: Change entry.sh permission
        run: |
          chmod +x airflow/entry.sh    
          chmod +x airflow/dags/bash/*.sh
      - name: 🧪 Debug permissions
        run: |
          ls -l airflow/entry.sh
          ls -l airflow/dags/bash/
     
      - name: "🐳 Run docker-compose on EC2"
        run: |
          docker compose -f docker-compose.deploy.yml up -d --remove-orphans
